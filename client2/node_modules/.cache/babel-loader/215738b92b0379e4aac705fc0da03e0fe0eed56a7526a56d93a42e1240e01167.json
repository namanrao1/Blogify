{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Test\\\\Desktop\\\\Naman bhai ke aage\\\\MERN\\\\PROJECTS\\\\BLOG\\\\Blog-App-using-MERN-stack\\\\client2\\\\src\\\\componets\\\\Blogs.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Blog from \"./Blog\";\nimport config from \"../config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Blogs = ({\n  userid,\n  setblogid\n}) => {\n  _s();\n  const [blogs, setBlogs] = useState([]);\n  const fetchBlogs = async () => {\n    try {\n      const res = await axios.get(`${config.BASE_URL}/api/blogs`);\n      const data = res.data;\n      console.log(\"Fetched blogs, user ID:\", userid);\n      setBlogs(data.blogs); // Update state with fetched blogs\n\n      console.log(blogs);\n    } catch (err) {\n      console.error(\"Error fetching blogs:\", err);\n    }\n  };\n  useEffect(() => {\n    fetchBlogs();\n  }, []);\n  const handleDelete = deletedId => {\n    // Update the blog list after deletion\n    setBlogs(prevBlogs => prevBlogs.filter(blog => blog._id !== deletedId));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: blogs.map(blog => /*#__PURE__*/_jsxDEV(Blog, {\n      setblogid: setblogid,\n      // Ensure unique key for each blog\n      id: blog._id,\n      isUser: userid === blog.user,\n      title: blog.title,\n      desc: blog.desc,\n      img: blog.img,\n      user: blog.user.name,\n      date: new Date(blog.date).toLocaleDateString(),\n      onDelete: handleDelete // Pass the delete handler to Blog component\n    }, blog._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(Blogs, \"RDzdeLKEs49XKHWpCIuOQAADm3U=\");\n_c = Blogs;\nexport default Blogs;\nvar _c;\n$RefreshReg$(_c, \"Blogs\");","map":{"version":3,"names":["React","useEffect","useState","axios","Blog","config","jsxDEV","_jsxDEV","Blogs","userid","setblogid","_s","blogs","setBlogs","fetchBlogs","res","get","BASE_URL","data","console","log","err","error","handleDelete","deletedId","prevBlogs","filter","blog","_id","children","map","id","isUser","user","title","desc","img","name","date","Date","toLocaleDateString","onDelete","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Test/Desktop/Naman bhai ke aage/MERN/PROJECTS/BLOG/Blog-App-using-MERN-stack/client2/src/componets/Blogs.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Blog from \"./Blog\";\r\nimport config from \"../config\";\r\n\r\nconst Blogs = ({ userid,setblogid}) => {\r\n  const [blogs, setBlogs] = useState([]);\r\n\r\n  const fetchBlogs = async () => {\r\n    try {\r\n      const res = await axios.get(`${config.BASE_URL}/api/blogs`);\r\n      const data = res.data;\r\n      console.log(\"Fetched blogs, user ID:\", userid);\r\n      setBlogs(data.blogs); // Update state with fetched blogs\r\n      \r\n      console.log(blogs);\r\n    } catch (err) {\r\n      console.error(\"Error fetching blogs:\", err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchBlogs();\r\n  }, []);\r\n\r\n  const handleDelete = (deletedId) => {\r\n    // Update the blog list after deletion\r\n    setBlogs((prevBlogs) => prevBlogs.filter(blog => blog._id !== deletedId));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {blogs.map((blog) => (\r\n        <Blog\r\n        setblogid={setblogid}\r\n          key={blog._id} // Ensure unique key for each blog\r\n          id={blog._id}\r\n          isUser={userid === blog.user}\r\n          title={blog.title}\r\n          desc={blog.desc}\r\n          img={blog.img}\r\n          user={blog.user.name}\r\n          date={new Date(blog.date).toLocaleDateString()}\r\n          onDelete={handleDelete} // Pass the delete handler to Blog component\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Blogs;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,MAAM,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,KAAK,GAAGA,CAAC;EAAEC,MAAM;EAACC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMY,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,GAAGX,MAAM,CAACY,QAAQ,YAAY,CAAC;MAC3D,MAAMC,IAAI,GAAGH,GAAG,CAACG,IAAI;MACrBC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEX,MAAM,CAAC;MAC9CI,QAAQ,CAACK,IAAI,CAACN,KAAK,CAAC,CAAC,CAAC;;MAEtBO,OAAO,CAACC,GAAG,CAACR,KAAK,CAAC;IACpB,CAAC,CAAC,OAAOS,GAAG,EAAE;MACZF,OAAO,CAACG,KAAK,CAAC,uBAAuB,EAAED,GAAG,CAAC;IAC7C;EACF,CAAC;EAEDpB,SAAS,CAAC,MAAM;IACda,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMS,YAAY,GAAIC,SAAS,IAAK;IAClC;IACAX,QAAQ,CAAEY,SAAS,IAAKA,SAAS,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAKJ,SAAS,CAAC,CAAC;EAC3E,CAAC;EAED,oBACEjB,OAAA;IAAAsB,QAAA,EACGjB,KAAK,CAACkB,GAAG,CAAEH,IAAI,iBACdpB,OAAA,CAACH,IAAI;MACLM,SAAS,EAAEA,SAAU;MACJ;MACfqB,EAAE,EAAEJ,IAAI,CAACC,GAAI;MACbI,MAAM,EAAEvB,MAAM,KAAKkB,IAAI,CAACM,IAAK;MAC7BC,KAAK,EAAEP,IAAI,CAACO,KAAM;MAClBC,IAAI,EAAER,IAAI,CAACQ,IAAK;MAChBC,GAAG,EAAET,IAAI,CAACS,GAAI;MACdH,IAAI,EAAEN,IAAI,CAACM,IAAI,CAACI,IAAK;MACrBC,IAAI,EAAE,IAAIC,IAAI,CAACZ,IAAI,CAACW,IAAI,CAAC,CAACE,kBAAkB,CAAC,CAAE;MAC/CC,QAAQ,EAAElB,YAAa,CAAC;IAAA,GARnBI,IAAI,CAACC,GAAG;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OASd,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAClC,EAAA,CA3CIH,KAAK;AAAAsC,EAAA,GAALtC,KAAK;AA6CX,eAAeA,KAAK;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}